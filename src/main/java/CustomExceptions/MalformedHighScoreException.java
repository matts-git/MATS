/**
 * Matthew Schuckmann
 * matts.git@gmail.com
 * MalformedHighScoreException.java 
 * 
This class 'MalformedHighScoreException' contains the custom exception MalformedHighScoreException(). It extends the Exception class,
and is a checked exception that is automatically enforced by the Handle or Declare Rule. This exception is intended to be thrown when 
there are problems with streaming objects from local file records.dat. When handled, this exception results in the formation of a 
new records.dat file with previous records reset to 0 and a message notifying the user output to the console.
 */

package customExceptions;

import app.GenericQuiz;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.HashMap;

public class MalformedHighScoreException extends Exception {
		
	// Serial version UID generated by Eclipse in response to compiler warning
	private static final long serialVersionUID = 6144063187349055462L;

	// Precondition: a MalformedHighScore exception has been handled
	// Postcondition: a message is printed to console informing the user of the problem encountered accessing and reading the high score record file.
	// A new scores.txt file is created with PrintWriter() and the appropriate lines of text are printed
	public MalformedHighScoreException(String userName) {
		
		System.out.println("Woops, there was a problem with the high score file!\nGood news is, a new file has been created...\nBad news is your scores"
    			+ " have been reset.\nPlease try again to build up your high scores!");
		
		HashMap<String, GenericQuiz.HighScore> scoreHash = new HashMap<String, GenericQuiz.HighScore>();
		
		try (ObjectOutputStream outfile = new ObjectOutputStream(new FileOutputStream("records.dat"));) {

			GenericQuiz.HighScore scoreReset = new GenericQuiz.HighScore();
			scoreReset.setUserName(userName);
			scoreReset.setScoreMap(scoreReset.defaultScoreMap());
			
			scoreHash.put(userName, scoreReset);
			
			outfile.writeObject(scoreHash);
			outfile.close();	
			
			}

		// FileNotFoundException | IOException ex) {
		catch (IOException ex) {
			ex.printStackTrace();
		}
	}

}
